def daliuge_to_nx(dlg_json_dict, workflow):
    """

    Take a daliuge json file and read it into a NetworkX
    The purpose of this is to re-organise nodes in the

    Parameters
    -----------
    dlg_json_dict: dict
        the DALiuGE dictionary we are translating
    workflow : str
        What type of workflow (i.e. DPrepA, DPrepB, ICAL) to append to
        the names of components

    Returns
    -------
    unrolled_nx : networkx.DiGraph
        Directed graph representation of Physical Graph Template


    Notes
    -----
    Adapted from code in SHADOW library.
    https://github.com/myxie/shadow


    """
    LOGGER.info("Converting DALiuGE to networkx...")
    unrolled_nx = nx.DiGraph()
    labels = {}
    node_list = []
    edge_list = []
    # store task names and counts
    task_names = {}

    for element in dlg_json_dict:
        if 'app' in element.keys():
            oid = element['oid']
            label = element['nm']
            if label in task_names:
                task_names[label]['node'] += 1
            else:
                task_names[label] = {'node': 1}
            labels[oid] = f"{label}_{task_names[label]['node'] - 1}"
            name = f"{workflow}_{labels[oid]}"
            node = (name, {'comp': 0})
            node_list.append(node)
    import time
    st = time.time()
    for element in dlg_json_dict:
        if ('storage' in element.keys()) and (
                'producers' in element and 'consumers' in element
        ):
            for uentry in element['producers']:
                try:
                    uentry.keys()
                except AttributeError:
                    u = uentry
                else:
                    u = list(uentry.keys())[0]
                component, num = labels[u].split('_')
                if 'out_edge' in task_names[component]:
                    task_names[component]['out_edge'] += 1
                else:
                    task_names[component]['out_edge'] = 1
                for ventry in element['consumers']:
                    try:
                        ventry.keys()
                    except AttributeError:
                        v = ventry
                    else:
                        v = list(ventry.keys())[0]
                    # edge = (labels[u], labels[v])
                    LOGGER.debug(f'Adding {u}, {v} to graph from {element}.')
                    edge_list.append(
                        (
                            f'{workflow}_{labels[u]}',
                            f'{workflow}_{labels[v]}',
                            {
                                "transfer_data": 0,
                                'u': u,
                                'v': v,
                                'data_drop_oid': element['oid']
                            }
                        )
                    )
    et = time.time()
    print(f"Time {et-st}")
    unrolled_nx.add_nodes_from(node_list)
    unrolled_nx.add_edges_from(edge_list)

    return unrolled_nx, task_names